{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\React\\\\Project_Weather_Forecast\\\\climate_app\\\\src\\\\components\\\\SearchContainer.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ClimateBackground from \"./ClimateBackground\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = () => {\n  _s();\n  const [city, setcity] = useState(\"\");\n  const [weatherForcast, setweatherForcast] = useState(null);\n  //Muda a aparencia do container caso clickado\n  const [ContainerAfter, setContainerAfter] = useState(\"ContainerBefore\");\n\n  //faz o valor da barra de pesquisa mudar para qual o usuario escolher\n  const handleChange = e => {\n    setcity(e.target.value);\n  };\n  const handleSearch = () => {\n    setContainerAfter(\"ContainerAfter\");\n    setweatherForcast(null);\n    fetch(`https://api.weatherapi.com/v1/current.json?key=5ac7719d7ef34a018a835519230203&q=${city}&lang=pt`).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      throw new Error(window.alert(\"Não foi possível obter a previsão do tempo para esta cidade.\"));\n    }).then(data => {\n      setweatherForcast(data);\n      console.log(\"data =\", data);\n    }).catch(error => {\n      console.error(error);\n      setcity(\"\");\n      setweatherForcast(null);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ClimateBackground, {\n      weatherForcast: weatherForcast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Container, \"vnW2qovbcArDIESQzCDJFoqeweQ=\");\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["useState","ClimateBackground","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","_s","city","setcity","weatherForcast","setweatherForcast","ContainerAfter","setContainerAfter","handleChange","e","target","value","handleSearch","fetch","then","response","status","json","Error","window","alert","data","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projetos/React/Project_Weather_Forecast/climate_app/src/components/SearchContainer.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport ClimateBackground from \"./ClimateBackground\"\r\n\r\nconst Container = () => {\r\n\r\n    const [city, setcity] = useState(\"\")\r\n    const [weatherForcast, setweatherForcast] = useState(null)\r\n    //Muda a aparencia do container caso clickado\r\n    const [ContainerAfter, setContainerAfter] = useState(\"ContainerBefore\")\r\n\r\n\r\n    //faz o valor da barra de pesquisa mudar para qual o usuario escolher\r\n    const handleChange = (e) => {\r\n\r\n        setcity(e.target.value)\r\n    }\r\n\r\n    const handleSearch = () => {\r\n        \r\n        setContainerAfter(\"ContainerAfter\")\r\n        setweatherForcast(null)\r\n        fetch(`https://api.weatherapi.com/v1/current.json?key=5ac7719d7ef34a018a835519230203&q=${city}&lang=pt`)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.json()\r\n                }\r\n                throw new Error(window.alert(\"Não foi possível obter a previsão do tempo para esta cidade.\"));\r\n            })\r\n            .then((data) => {\r\n                \r\n                setweatherForcast(data)\r\n\r\n                console.log(\"data =\", data)\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                setcity(\"\")\r\n                setweatherForcast(null)\r\n                \r\n            });\r\n            \r\n    };\r\n\r\n    return (\r\n        <>\r\n        \r\n            <ClimateBackground weatherForcast={weatherForcast} />\r\n\r\n            \r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Container"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,iBAAiB,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1D;EACA,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,iBAAiB,CAAC;;EAGvE;EACA,MAAMc,YAAY,GAAIC,CAAC,IAAK;IAExBN,OAAO,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAEvBL,iBAAiB,CAAC,gBAAgB,CAAC;IACnCF,iBAAiB,CAAC,IAAI,CAAC;IACvBQ,KAAK,CAAE,mFAAkFX,IAAK,UAAS,CAAC,CACnGY,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACzB,OAAOD,QAAQ,CAACE,IAAI,EAAE;MAC1B;MACA,MAAM,IAAIC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,8DAA8D,CAAC,CAAC;IACjG,CAAC,CAAC,CACDN,IAAI,CAAEO,IAAI,IAAK;MAEZhB,iBAAiB,CAACgB,IAAI,CAAC;MAEvBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,IAAI,CAAC;IAC/B,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;MACpBtB,OAAO,CAAC,EAAE,CAAC;MACXE,iBAAiB,CAAC,IAAI,CAAC;IAE3B,CAAC,CAAC;EAEV,CAAC;EAED,oBACIR,OAAA,CAAAE,SAAA;IAAA2B,QAAA,eAEI7B,OAAA,CAACF,iBAAiB;MAACS,cAAc,EAAEA;IAAe;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAItD;AAGX,CAAC;AAAA7B,EAAA,CAlDKD,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAoDf,eAAeA,SAAS;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}